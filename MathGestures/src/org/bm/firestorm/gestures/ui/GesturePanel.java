/*
 * GesturePanel.java
 *
 * Created on Dec 11, 2009, 3:52:02 PM
 */
package org.bm.firestorm.gestures.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.XMLDecoder;
import java.io.BufferedInputStream;
import org.bm.firestorm.gestures.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.event.EventListenerList;
import javax.swing.filechooser.FileFilter;
import org.bm.firestorm.functionspace.ONLegendre;
import org.bm.firestorm.gestures.data.CoefficientClassifier;
import org.bm.firestorm.gestures.data.TrainContext;
import org.bm.firestorm.gestures.data.TrainGesture;
import org.bm.firestorm.testing.GestureTrainerApp;

/**
 * <p>
 *    This is a bean that accepts user input in the form of gestural commands, looks them up in the
 *    corresponding database, and stores a view of the top few matched gestures.
 * </p>
 * <p>
 *    This also implements an event fire pattern that creates and returns an action event
 *    corresponding to a gesture's string whenever the gesture is drawn.
 * </p>
 * 
 * @author Elisha Peterson
 */
public class GesturePanel extends javax.swing.JPanel {

    /** This is the cutoff threshold for firing a gesture event. */
    float threshold = 2f;

    /** Creates new form GesturePanel */
    public GesturePanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainedGestures = new org.bm.firestorm.gestures.data.CoefficientClassifier();
        gestureInputPanel = new org.bm.firestorm.gestures.ui.DrawPanel();
        clearPathsButton = new javax.swing.JButton();
        loadGestureLibraryButton = new javax.swing.JButton();
        foundGesturePanel = new org.bm.firestorm.gestures.ui.GestureLookupPanel();

        setMinimumSize(new java.awt.Dimension(220, 400));
        setPreferredSize(new java.awt.Dimension(220, 420));

        gestureInputPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        gestureInputPanel.setMaxNumberOfPaths(3);
        gestureInputPanel.setMaximumSize(new java.awt.Dimension(200, 200));
        gestureInputPanel.setMinimumSize(new java.awt.Dimension(200, 200));
        gestureInputPanel.setPreferredSize(new java.awt.Dimension(200, 200));
        gestureInputPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gestureInputPanelStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout gestureInputPanelLayout = new org.jdesktop.layout.GroupLayout(gestureInputPanel);
        gestureInputPanel.setLayout(gestureInputPanelLayout);
        gestureInputPanelLayout.setHorizontalGroup(
            gestureInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 196, Short.MAX_VALUE)
        );
        gestureInputPanelLayout.setVerticalGroup(
            gestureInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 196, Short.MAX_VALUE)
        );

        add(gestureInputPanel);

        clearPathsButton.setText("Clear Paths");
        clearPathsButton.setFocusable(false);
        clearPathsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearPathsButton.setMaximumSize(new java.awt.Dimension(200, 25));
        clearPathsButton.setMinimumSize(new java.awt.Dimension(200, 25));
        clearPathsButton.setPreferredSize(new java.awt.Dimension(200, 25));
        clearPathsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearPathsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPathsButtonActionPerformed(evt);
            }
        });
        add(clearPathsButton);

        loadGestureLibraryButton.setText("Load Gesture Library ...");
        loadGestureLibraryButton.setMaximumSize(new java.awt.Dimension(200, 25));
        loadGestureLibraryButton.setMinimumSize(new java.awt.Dimension(200, 25));
        loadGestureLibraryButton.setPreferredSize(new java.awt.Dimension(200, 25));
        loadGestureLibraryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGestureLibraryButtonActionPerformed(evt);
            }
        });
        add(loadGestureLibraryButton);

        foundGesturePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Closest Gestures"));
        foundGesturePanel.setMaximumSize(new java.awt.Dimension(220, 154));
        foundGesturePanel.setMinimumSize(new java.awt.Dimension(220, 154));
        foundGesturePanel.setPreferredSize(new java.awt.Dimension(220, 154));
        add(foundGesturePanel);
    }// </editor-fold>//GEN-END:initComponents

    public float getThreshold() {
        return threshold;
    }

    public void setThreshold(float threshold) {
        this.threshold = threshold;
    }

    /** This converts the user path into polynomial functions. */
    final PolyReader pr = new PolyReader();

    /**
     * Called when the user inputs a path. The path is converted into a gesture,
     * and a lookup is done to find the closest matching gesture. The two best
     * are shown in the found gesture panel, and an action is fired with the command
     * corresponding to the gesture as the command string.
     * @param evt
     */
    private void gestureInputPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gestureInputPanelStateChanged
        TrainGesture inputGesture = new TrainGesture(TrainContext.NONE, pr.convertPath(gestureInputPanel.getLastPath()));
        foundGesturePanel.lookupGesture(inputGesture, trainedGestures);
        String bestString = (String) trainedGestures.get(foundGesturePanel.getBestGesture());
        float bestDistance = foundGesturePanel.getBestDistance();
        if (bestString != null && bestDistance < threshold)
            fireActionPerformed(bestString);
}//GEN-LAST:event_gestureInputPanelStateChanged

    private void clearPathsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPathsButtonActionPerformed
        gestureInputPanel.clearAllPaths();
}//GEN-LAST:event_clearPathsButtonActionPerformed

    //
    // FILE HANDLING
    //

    /** Represents an open gesture file. */
    File openFile = null;
    /** Used to select the files. */
    final JFileChooser fc = new JFileChooser();

    /* Get the extension of a file. */
    public static String getExtension(File f) {
        int i = f.getName().lastIndexOf('.');
        return (i > 0 && i < f.getName().length() - 1) ? f.getName().substring(i + 1).toLowerCase() : "";
    }
    
    /** Filters the file view for .xml files */
    final static FileFilter XML_FILE_FILTER = new FileFilter() {
        public boolean accept(File pathname) {
            return pathname != null && (pathname.isDirectory() || getExtension(pathname).equals("xml"));
        }
        @Override
        public String getDescription() {
            return "XML files";
        }
    };

    private void loadGestureLibraryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGestureLibraryButtonActionPerformed
        fc.setFileFilter(XML_FILE_FILTER);
        if (openFile != null) {
            fc.setCurrentDirectory(openFile);
            fc.setSelectedFile(openFile);
        }
        int returnVal = fc.showOpenDialog(GesturePanel.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openFile = fc.getSelectedFile();
            try {
                XMLDecoder decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(openFile)));
                trainedGestures = (CoefficientClassifier) decoder.readObject();
                decoder.close();
                System.out.println("Opened file " + openFile.getName() + " with " + trainedGestures.size() + " trained gestures.");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GestureTrainerApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loadGestureLibraryButtonActionPerformed
 

    //
    // STANDARD ActionEvent CODE
    //

    protected ActionEvent actionEvent = null;
    protected EventListenerList actionListenerList = new EventListenerList();

    public void addActionListener(ActionListener l) {
        actionListenerList.add(ActionListener.class, l);
    }

    public void removeActionListener(ActionListener l) {
        actionListenerList.remove(ActionListener.class, l);
    }

    protected void fireActionPerformed(String s) {
        actionEvent = new ActionEvent(this, 0, s);
        Object[] listeners = actionListenerList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -= 2) {
            if (listeners[i] == ActionListener.class) {
                ((ActionListener) listeners[i + 1]).actionPerformed(actionEvent);
            }
        }
    }

    //
    // VARIABLE DEFINITIONS FROM GUI FORM
    //

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearPathsButton;
    private org.bm.firestorm.gestures.ui.GestureLookupPanel foundGesturePanel;
    private org.bm.firestorm.gestures.ui.DrawPanel gestureInputPanel;
    private javax.swing.JButton loadGestureLibraryButton;
    private org.bm.firestorm.gestures.data.CoefficientClassifier trainedGestures;
    // End of variables declaration//GEN-END:variables
}
