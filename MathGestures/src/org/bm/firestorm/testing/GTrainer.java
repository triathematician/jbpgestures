/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GTrainer.java
 *
 * Created on Oct 31, 2009, 7:31:19 PM
 */

package org.bm.firestorm.testing;

import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.bm.firestorm.functionspace.FunctionUtils;
import org.bm.firestorm.functionspace.ONLegendre;
import org.bm.firestorm.gestures.PolyReader;
import org.bm.firestorm.gestures.data.CoefficientClassifier;
import org.bm.firestorm.gestures.data.TrainContext;
import org.bm.firestorm.gestures.data.TrainGesture;

/**
 *
 * @author ae3263
 */
public class GTrainer extends javax.swing.JFrame {

    final PolyReader pr = new PolyReader();
    final ONLegendre onl = new ONLegendre();

    final JFileChooser fc = new JFileChooser();
    File openFile = null;

    /*
     * Get the extension of a file.
     */
    public static String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 &&  i < s.length() - 1) {
            ext = s.substring(i+1).toLowerCase();
        }
        return ext;
    }

    final static FileFilter xmlFilter = new FileFilter(){
        public boolean accept(File pathname) {
            return pathname != null && (pathname.isDirectory() || getExtension(pathname).equals("xml"));
        }

        @Override
        public String getDescription() {
            return "XML files";
        }
    };

    /** Creates new form GTrainer */
    public GTrainer() {
        initComponents();
        gestureTable.setModel( new CoefficientClassifier.GestureTableModel(trainedGestures) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainedGestures = new org.bm.firestorm.gestures.data.CoefficientClassifier<String>();
        reader = new org.bm.firestorm.gestures.PolyReader();
        jToolBar1 = new javax.swing.JToolBar();
        contextLabel = new javax.swing.JLabel();
        contextBox = new javax.swing.JComboBox();
        trainStringLabel = new javax.swing.JLabel();
        trainString = new javax.swing.JTextField();
        mainPanel = new javax.swing.JPanel();
        trainingPanel = new org.bm.firestorm.gestures.GPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gestureTable = new javax.swing.JTable();
        reflectPanel = new org.bm.firestorm.gestures.ParametricPathPanel();
        acceptButton = new javax.swing.JButton();
        rejectButton = new javax.swing.JButton();
        lookupGesturePanel = new org.bm.firestorm.gestures.ParametricPathPanel();
        storedLabel = new javax.swing.JLabel();
        closestLabel = new javax.swing.JLabel();
        lookupStringLabel = new javax.swing.JLabel();
        lookupDistLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gesture Training");

        jToolBar1.setRollover(true);

        contextLabel.setText("Context:");
        jToolBar1.add(contextLabel);

        contextBox.setModel(new DefaultComboBoxModel(TrainContext.values()));
        jToolBar1.add(contextBox);

        trainStringLabel.setText("  String:");
        jToolBar1.add(trainStringLabel);

        trainString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainStringActionPerformed(evt);
            }
        });
        jToolBar1.add(trainString);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        trainingPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        trainingPanel.setMaxNumberOfPaths(3);
        trainingPanel.setMaximumSize(new java.awt.Dimension(200, 200));
        trainingPanel.setMinimumSize(new java.awt.Dimension(200, 200));
        trainingPanel.setPreferredSize(new java.awt.Dimension(200, 200));
        trainingPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                trainingPanelStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout trainingPanelLayout = new org.jdesktop.layout.GroupLayout(trainingPanel);
        trainingPanel.setLayout(trainingPanelLayout);
        trainingPanelLayout.setHorizontalGroup(
            trainingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 196, Short.MAX_VALUE)
        );
        trainingPanelLayout.setVerticalGroup(
            trainingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 196, Short.MAX_VALUE)
        );

        gestureTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(gestureTable);

        reflectPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        reflectPanel.setMaximumSize(new java.awt.Dimension(100, 100));

        org.jdesktop.layout.GroupLayout reflectPanelLayout = new org.jdesktop.layout.GroupLayout(reflectPanel);
        reflectPanel.setLayout(reflectPanelLayout);
        reflectPanelLayout.setHorizontalGroup(
            reflectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        reflectPanelLayout.setVerticalGroup(
            reflectPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        acceptButton.setText("ACCEPT");
        acceptButton.setFocusable(false);
        acceptButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        acceptButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        rejectButton.setText("REJECT");
        rejectButton.setFocusable(false);
        rejectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rejectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rejectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectButtonActionPerformed(evt);
            }
        });

        lookupGesturePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        lookupGesturePanel.setMaximumSize(new java.awt.Dimension(100, 100));

        org.jdesktop.layout.GroupLayout lookupGesturePanelLayout = new org.jdesktop.layout.GroupLayout(lookupGesturePanel);
        lookupGesturePanel.setLayout(lookupGesturePanelLayout);
        lookupGesturePanelLayout.setHorizontalGroup(
            lookupGesturePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        lookupGesturePanelLayout.setVerticalGroup(
            lookupGesturePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        storedLabel.setText("Stored Gesture:");

        closestLabel.setForeground(new java.awt.Color(102, 102, 102));
        closestLabel.setText("Closest Gesture:");

        lookupStringLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lookupStringLabel.setForeground(new java.awt.Color(204, 0, 51));
        lookupStringLabel.setText("NONE");

        lookupDistLabel.setText("dist=0.0");

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(trainingPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(lookupStringLabel)
                            .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(rejectButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, acceptButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, storedLabel))
                            .add(closestLabel)
                            .add(lookupDistLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lookupGesturePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(reflectPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanelLayout.createSequentialGroup()
                .add(13, 13, 13)
                .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                    .add(mainPanelLayout.createSequentialGroup()
                        .add(trainingPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(storedLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(acceptButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(rejectButton))
                            .add(reflectPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(lookupGesturePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(mainPanelLayout.createSequentialGroup()
                                .add(closestLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lookupStringLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lookupDistLabel)))))
                .addContainerGap())
        );

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open Gesture Database");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save Gesture Database");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save Gesture Database as...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    TrainContext context() {
        return (TrainContext) contextBox.getModel().getSelectedItem();
    }

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        double[][] coeffs = reader.convertPath(trainingPanel.getLastPath());
        trainedGestures.put(context(), coeffs, trainString.getText());
        trainingPanel.clearAllPaths();
        ((CoefficientClassifier.GestureTableModel) gestureTable.getModel()).stateChanged(null);
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void trainStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainStringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainStringActionPerformed

    private void rejectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectButtonActionPerformed
        trainingPanel.clearAllPaths();
    }//GEN-LAST:event_rejectButtonActionPerformed

    private void trainingPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_trainingPanelStateChanged
        double[][] coeffs = pr.convertPath(trainingPanel.getLastPath());
        reflectPanel.setFunctions(new FunctionUtils.CFunction(onl, coeffs[0]), new FunctionUtils.CFunction(onl, coeffs[1]));
        reflectPanel.repaint();
        try {
            TrainGesture tg = new TrainGesture(context(), coeffs);
            TrainGesture best = trainedGestures.closestTo(tg);
            lookupStringLabel.setText( (String) trainedGestures.get(best) );
            System.out.println( (String) trainedGestures.get(best) );
            lookupDistLabel.setText( String.format("%.2f", best.distance(tg)) );
            lookupGesturePanel.setFunctions(new FunctionUtils.CFunction(onl, best.getArrays()[0]), new FunctionUtils.CFunction(onl, best.getArrays()[1]));
            lookupGesturePanel.repaint();
        } catch (NoSuchElementException e) {
        }
    }//GEN-LAST:event_trainingPanelStateChanged

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        fc.setFileFilter(xmlFilter);
        if (openFile != null) {
            fc.setCurrentDirectory(openFile);
            fc.setSelectedFile(openFile);
        }
        int returnVal = fc.showOpenDialog(GTrainer.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openFile = fc.getSelectedFile();
            System.out.print("Opening: " + openFile.getName() + "...");
            try {
                XMLDecoder decoder = new XMLDecoder(new BufferedInputStream(new FileInputStream(openFile)));
                trainedGestures = (CoefficientClassifier) decoder.readObject();
                gestureTable.setModel( new CoefficientClassifier.GestureTableModel(trainedGestures) );
                decoder.close();
                System.out.println(" successful.");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GTrainer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println(" open command cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (openFile != null) {
            System.out.print("Saving: " + openFile.getName() + "...");
            try {
                XMLEncoder encoder = new XMLEncoder(new BufferedOutputStream(new FileOutputStream(openFile)));
                encoder.writeObject(trainedGestures);
                encoder.close();
                System.out.println(" successful.");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GTrainer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            saveAsMenuItemActionPerformed(evt);
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        fc.setFileFilter(xmlFilter);
        if (openFile != null) {
            fc.setCurrentDirectory(openFile);
            fc.setSelectedFile(openFile);
        }
        int returnVal = fc.showSaveDialog(GTrainer.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openFile = fc.getSelectedFile();
            System.out.print("Saving: " + openFile.getName() + "...");
            try {
                XMLEncoder encoder = new XMLEncoder(new BufferedOutputStream(new FileOutputStream(openFile)));
                encoder.writeObject(trainedGestures);
                encoder.close();
                System.out.println(" successful.");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GTrainer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println(" save command cancelled by user.");
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GTrainer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JLabel closestLabel;
    private javax.swing.JComboBox contextBox;
    private javax.swing.JLabel contextLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTable gestureTable;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lookupDistLabel;
    private org.bm.firestorm.gestures.ParametricPathPanel lookupGesturePanel;
    private javax.swing.JLabel lookupStringLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem openMenuItem;
    private org.bm.firestorm.gestures.PolyReader reader;
    private org.bm.firestorm.gestures.ParametricPathPanel reflectPanel;
    private javax.swing.JButton rejectButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel storedLabel;
    private javax.swing.JTextField trainString;
    private javax.swing.JLabel trainStringLabel;
    private org.bm.firestorm.gestures.data.CoefficientClassifier trainedGestures;
    private org.bm.firestorm.gestures.GPanel trainingPanel;
    // End of variables declaration//GEN-END:variables

}
